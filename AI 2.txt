def aStarAlgo(start_node, stop_node, graph_nodes, h_dist):
    open_set = set(start_node)
    closed_set = set()
    g = {}
    parents = {}
    g[start_node] = 0
    parents[start_node] = start_node
    
    while len(open_set) > 0:
        n = None
        
        for v in open_set:
            if n is None or g[v] + heuristic(v, h_dist) < g[n] + heuristic(n, h_dist):
                n = v
                
        if n == stop_node or graph_nodes[n] is None:
            pass
        else:
            for (m, weight) in get_neighbors(n, graph_nodes):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)
                            
        if n is None:
            print('Path does not exist!')
            return None
            
        if n == stop_node:
            path = []
                
            while parents[n] != n:
                path.append(n)
                n = parents[n]
                    
            path.append(start_node)
            
            path.reverse()
            
            print('Path found: {}'.format(path))
            return None
            
        open_set.remove(n)
        closed_set.add(n)
            
    print('Path does not exist!') 
    return None
    
    
def get_neighbors(v, graph_nodes):
    if v in graph_nodes:
        return graph_nodes[v]
    else:
        return None

def heuristic(n, h_dist):
    return h_dist[n]

# Take input for graph nodes
graph_nodes = {}
num_nodes = int(input("Enter the number of nodes in the graph: "))
for _ in range(num_nodes):
    node = input("Enter node: ").upper()
    neighbors = input(f"Enter neighbors of {node} (comma-separated, format: node1,weight1,node2,weight2,...): ").split(',')
    graph_nodes[node] = [(neighbors[i], int(neighbors[i+1])) for i in range(0, len(neighbors), 2)]

# Take input for heuristic distances
h_dist = {}
for node in graph_nodes.keys():
    h = int(input(f"Enter heuristic distance for node {node}: "))
    h_dist[node] = h

start_node = input("Enter start node: ").upper()
stop_node = input("Enter stop node: ").upper()

aStarAlgo(start_node, stop_node, graph_nodes, h_dist)
//Enter the number of nodes in the graph: 5
Enter node: A
Enter neighbors of A (comma-separated, format: node1,weight1,node2,weight2,...): B,2,C,3
Enter node: B
Enter neighbors of B (comma-separated, format: node1,weight1,node2,weight2,...): D,1
Enter node: C
Enter neighbors of C (comma-separated, format: node1,weight1,node2,weight2,...): D,2,E,4
Enter node: D
Enter neighbors of D (comma-separated, format: node1,weight1,node2,weight2,...): E,1
Enter node: E
Enter neighbors of E (comma-separated, format: node1,weight1,node2,weight2,...): 
Enter heuristic distance for node A: 5
Enter heuristic distance for node B: 4
Enter heuristic distance for node C: 3
Enter heuristic distance for node D: 2
Enter heuristic distance for node E: 1
Enter start node: A
Enter stop node: E
