#include <iostream>
#include <vector>
#include <queue>
#include <cmath>

using namespace std;

// Structure to represent a node in the grid
struct Node {
    int x, y; // Coordinates of the node
    int f, g, h; // f = g + h, g = cost from start node, h = heuristic cost to goal node
    Node* parent; // Pointer to the parent node

    Node(int x, int y) : x(x), y(y), f(0), g(0), h(0), parent(nullptr) {}

    // Calculate the heuristic (Manhattan distance)
    void calculateH(const Node& goal) {
        h = abs(x - goal.x) + abs(y - goal.y);
    }

    // Calculate the total cost f
    void calculateF() {
        f = g + h;
    }
};

// Custom comparator for priority queue
struct CompareNode {
    bool operator()(const Node* lhs, const Node* rhs) const {
        return lhs->f > rhs->f;
    }
};

// A* search algorithm
vector<pair<int, int>> aStarSearch(const vector<vector<int>>& grid, pair<int, int> start, pair<int, int> goal) {
    int rows = grid.size();
    int cols = grid[0].size();

    Node* startNode = new Node(start.first, start.second);
    Node* goalNode = new Node(goal.first, goal.second);

    // Create open and closed lists
    priority_queue<Node*, vector<Node*>, CompareNode> openList;
    vector<vector<bool>> closedList(rows, vector<bool>(cols, false));

    openList.push(startNode);

    // Run A* algorithm
    while (!openList.empty()) {
        Node* current = openList.top();
        openList.pop();
        closedList[current->x][current->y] = true;

        if (current->x == goalNode->x && current->y == goalNode->y) {
            // Path found, reconstruct and return the path
            vector<pair<int, int>> path;
            while (current != nullptr) {
                path.push_back({current->x, current->y});
                current = current->parent;
            }
            vector<pair<int, int>> reversedPath(path.rbegin(), path.rend());
            return reversedPath;
        }

        // Generate neighbors
        vector<pair<int, int>> neighbors = {
            {current->x - 1, current->y}, {current->x + 1, current->y},
            {current->x, current->y - 1}, {current->x, current->y + 1}
        };

        for (const auto& neighbor : neighbors) {
            int nx = neighbor.first, ny = neighbor.second;
            if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && !closedList[nx][ny] && grid[nx][ny] != 1) {
                Node* neighborNode = new Node(nx, ny);
                neighborNode->g = current->g + 1;
                neighborNode->calculateH(*goalNode);
                neighborNode->calculateF();
                neighborNode->parent = current;

                openList.push(neighborNode);
                closedList[nx][ny] = true;
            }
        }
    }

    return {}; // No path found
}

int main() {
    // Example usage
    vector<vector<int>> grid = {
        {0, 0, 0, 0, 0},
        {1, 1, 1, 1, 0},
        {0, 0, 0, 0, 0},
        {0, 1, 1, 1, 1},
        {0, 0, 0, 0, 0}
    };

    pair<int, int> start = {0, 0};
    pair<int, int> goal = {4, 4};

    vector<pair<int, int>> path = aStarSearch(grid, start, goal);

    if (path.empty()) {
        cout << "No path found." << endl;
    } else {
        cout << "Path found:" << endl;
        for (const auto& p : path) {
            cout << "(" << p.first << ", " << p.second << ") ";
        }
        cout << endl;
    }

    return 0;
}
