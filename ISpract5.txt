import random

# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

# Function to generate random prime number
def generate_prime(bits):
    while True:
        num = random.getrandbits(bits)
        if is_prime(num):
            return num

# Function to calculate modular inverse
def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

# Function to generate RSA keys
def generate_rsa_keys(bits):
    p = generate_prime(bits // 2)
    q = generate_prime(bits // 2)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 65537
    d = mod_inverse(e, phi)
    return ((n, e), (n, d))

# Function to encrypt message using RSA public key
def encrypt(message, public_key):
    n, e = public_key
    return pow(message, e, n)

# Function to decrypt message using RSA private key
def decrypt(ciphertext, private_key):
    n, d = private_key
    return pow(ciphertext, d, n)

# Main function
def main():
    bits = int(input("Enter the number of bits for RSA keys: "))
    plaintext = input("Enter the plaintext: ")

    # Convert plaintext to integer using UTF-8 encoding
    plaintext_int = int.from_bytes(plaintext.encode('utf-8'), 'big')

    # Generate RSA keys
    public_key, private_key = generate_rsa_keys(bits)

    # Encrypt plaintext using public key
    ciphertext = encrypt(plaintext_int, public_key)
    print("Encrypted ciphertext:", ciphertext)

    # Decrypt ciphertext using private key
    decrypted_text_int = decrypt(ciphertext, private_key)

    # Convert decrypted plaintext integer to text
    decrypted_text = decrypted_text_int.to_bytes((decrypted_text_int.bit_length() + 7) // 8, 'big').decode('utf-8')
    print("Decrypted plaintext:", decrypted_text)

if __name__ == "__main__":
    main()
